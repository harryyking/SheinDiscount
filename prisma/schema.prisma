generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @db.Timestamptz
  image         String?
  role          String       @default("free") // "free" or "insights-subscriber"
  goals         Goal[]         @relation("GoalCreator")
  memberships   Membership[]
  completions   Completion[]
  invites       Invite[]
  isPremium     Boolean        @default(false)


  Session Session[]

  Account Account[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Goal {
  id           String         @id @default(cuid())
  name         String
  description  String?
  creatorId    String
  creator      User           @relation("GoalCreator", fields: [creatorId], references: [id])
  memberships  Membership[]
  completions  Completion[]
  invites      Invite[]
}

model Membership {
  userId    String
  goalId    String
  user      User           @relation(fields: [userId], references: [id])
  goal      Goal           @relation(fields: [goalId], references: [id])
  joinedAt  DateTime       @default(now())
  @@id([userId, goalId])
}

model Completion {
  id        String   @id @default(cuid())
  userId    String
  goalId    String
  date      DateTime @db.Date
  user      User     @relation(fields: [userId], references: [id])
  goal      Goal     @relation(fields: [goalId], references: [id])
  @@unique([userId, goalId, date])
}

model Invite {
  id        String   @id @default(cuid())
  code      String   @unique
  goalId    String
  creatorId String
  createdAt DateTime @default(now())
  expiresAt DateTime?
  goal      Goal     @relation(fields: [goalId], references: [id])
  creator   User     @relation(fields: [creatorId], references: [id])
}