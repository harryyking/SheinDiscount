generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Session       Session[]
  Account       Account[]
  Product       Product[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id        String    @id @default(cuid())
  userId    String
  name      String
  url       String
  
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  Plan      Plan[]    // One-to-many relation with Plan
}

model Plan {
  id        String    @id @default(cuid())
  productId String    
  name      String    // e.g., "Basic", "Pro", "Enterprise"
  price     Float
  createdAt DateTime  @default(now())
  product   Product   @relation(fields: [productId], references: [id])
  Vote      Vote[]    // Votes tied to specific plans
}

model Vote {
  id        String   @id @default(cuid())
  planId    String   // Changed to reference Plan instead of Product
  value     String   @default("too_high") // "too_high", "just_right", "a_steal"
  createdAt DateTime @default(now())
  plan      Plan     @relation(fields: [planId], references: [id])
}